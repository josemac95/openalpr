void NiblackSauvolaWolfJolion (Mat im, Mat output, NiblackVersion version,
	int winx, int winy, double k, double dR)
{
	double m, s, max_s;
	double th=0;
	double min_I, max_I;
	int wxh	= winx/2;
	int wyh	= winy/2;
	int x_firstth= wxh;
	int x_lastth = im.cols-wxh-1;
	int y_lastth = im.rows-wyh-1;
	int y_firstth= wyh;
	int mx, my;

	// Crea estadisticas locales y las almacena en matrices
	Mat map_m = Mat::zeros (im.rows, im.cols, CV_32F);
	Mat map_s = Mat::zeros (im.rows, im.cols, CV_32F);
	max_s = calcLocalStats (im, map_m, map_s, winx, winy);

	minMaxLoc(im, &min_I, &max_I);

	Mat thsurf (im.rows, im.cols, CV_32F);

	// Crea la superficie de threshold inluyendo el procesamiento de bordes
	for	(int j = y_firstth ; j<=y_lastth; j++) {

		for	(int i=0 ; i <= im.cols-winx; i++) {

			m  = map_m.fget(i+wxh, j);
			s  = map_s.fget(i+wxh, j);

			// Calcula el threshold
			switch (version) {

				case NIBLACK:
					th = m + k*s;
					break;

				case SAUVOLA:
					th = m * (1 + k*(s/dR-1));
					break;

				case WOLFJOLION:
					th = m + k * (s/max_s-1) * (m-min_I);
					break;

				default:
					cerr << "Unknown threshold type in ImageThresholder::surfaceNiblackImproved()\n";
					exit (1);
			}

			thsurf.fset(i+wxh,j,th);

			if (i==0) {
				// Borde izquierdo
				for (int i=0; i<=x_firstth; ++i)
					thsurf.fset(i,j,th);

				// Esquina superior izquierda
				if (j==y_firstth)
					for (int u=0; u<y_firstth; ++u)
						for (int i=0; i<=x_firstth; ++i)
							thsurf.fset(i,u,th);

				// Esquina inferior izquierda
				if (j==y_lastth)
					for (int u=y_lastth+1; u<im.rows; ++u)
						for (int i=0; i<=x_firstth; ++i)
							thsurf.fset(i,u,th);
			}

			// Borde superior
			if (j==y_firstth)
				for (int u=0; u<y_firstth; ++u)
					thsurf.fset(i+wxh,u,th);

			// Borde inferior
			if (j==y_lastth)
				for (int u=y_lastth+1; u<im.rows; ++u)
					thsurf.fset(i+wxh,u,th);
		}

		// Borde derecho
		for (int i=x_lastth; i<im.cols; ++i)
			thsurf.fset(i,j,th);

		// Esquina superior derecha
		if (j==y_firstth)
			for (int u=0; u<y_firstth; ++u)
				for (int i=x_lastth; i<im.cols; ++i)
					thsurf.fset(i,u,th);

		// Esquina inferior derecha
		if (j==y_lastth)
			for (int u=y_lastth+1; u<im.rows; ++u)
				for (int i=x_lastth; i<im.cols; ++i)
					thsurf.fset(i,u,th);
	}


	for	(int y=0; y<im.rows; ++y) 
	for	(int x=0; x<im.cols; ++x) 
	{
		if (im.uget(x,y) >= thsurf.fget(x,y))
		{
			output.uset(x,y,255);
		}
		else
		{
			output.uset(x,y,0);
		}
	}
}
