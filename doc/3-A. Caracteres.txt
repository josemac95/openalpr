void CharacterAnalysis::analyze()
{
	// Temporizador
	timespec startTime;
	getTimeMonotonic(&startTime);

	// Invierte los bits de la imagen
	if (config->always_invert)
		bitwise_not(pipeline_data->crop_gray, pipeline_data->crop_gray);

	// Limpia los thresholds
	pipeline_data->clearThresholds();
	/////////////////////
	// 2. BINARIZACION //
	/////////////////////
	// Establece los thresholds
	pipeline_data->thresholds = produceThresholds(pipeline_data->crop_gray, config);

	// Tiempo de analisis
	timespec contoursStartTime;
	getTimeMonotonic(&contoursStartTime);

	// Limpia los objetos textLine
	pipeline_data->textLines.clear();

	// Para cada threshold
	for (unsigned int i = 0; i < pipeline_data->thresholds.size(); i++)
	{
		// Obtiene los contornos de la imagen binarizada
		TextContours tc(pipeline_data->thresholds[i]);
		// Guarda los contornos
		allTextContours.push_back(tc);
	}

	// Si esta el modo debug del tiempo
	if (config->debugTiming)
	{
		// Fin temporizador
		timespec contoursEndTime;
		getTimeMonotonic(&contoursEndTime);
		// Imprime el tiempo para encontrar los contornos en el analisis de caracteres
		cout << "  -- Character Analysis Find Contours Time: " << diffclock(contoursStartTime, contoursEndTime) << "ms." << endl;
	}

	// Tiempo para aplicar filtro
	timespec filterStartTime;
	getTimeMonotonic(&filterStartTime);

	// Para cada threshold
	for (unsigned int i = 0; i < pipeline_data->thresholds.size(); i++)
	{
		// Aplica filtro a contornos
		this->filter(pipeline_data->thresholds[i], allTextContours[i]);
		// Si esta activo el debug de analisis de caracteres
		if (config->debugCharAnalysis)
			// Imprime cuantos contornos buenos tiene cada threshold
			cout << "Threshold " << i << " had " << allTextContours[i].getGoodIndicesCount() << " good indices." << endl;
	}

	// Si debug tiempo
	if (config->debugTiming)
	{
		// Fin temporizador
		timespec filterEndTime;
		getTimeMonotonic(&filterEndTime);
		// Imprime el tiempo para la aplicacion del filtro
		cout << "  -- Character Analysis Filter Time: " << diffclock(filterStartTime, filterEndTime) << "ms." << endl;
	}

	// Mascara de la matricula
	PlateMask plateMask(pipeline_data);
	// Encuentra un area rectangular que engloba los caracteres
	plateMask.findOuterBoxMask(allTextContours);

	// Si ha encontrado el rectangulo
	// Se han encontrado unos bordes de matricula
	pipeline_data->hasPlateBorder = plateMask.hasPlateMask;
	// La mascara para los bordes de matricula es la mascara calculada
	pipeline_data->plateBorderMask = plateMask.getMask();

	// Si se ha encontrado el rectangulo
	if (plateMask.hasPlateMask)
	{
		// Para cada threshold
		for (unsigned int i = 0; i < pipeline_data->thresholds.size(); i++)
		{
			// Elimina los contornos malos que quedan fuera
			filterByOuterMask(allTextContours[i]);
		}
	}

	// Mejor puntuacion
	int bestFitScore = -1;
	// Mejor indice
	int bestFitIndex = -1;
	// Para cada threshold
	for (unsigned int i = 0; i < pipeline_data->thresholds.size(); i++)
	{
		// Numero de segmentos para el threshold actual
		int segmentCount = allTextContours[i].getGoodIndicesCount();

		// Si el numero de segmentos es mayor que la mejor puntuacion
		if (segmentCount > bestFitScore)
		{
			// La mejor puntuacion es el numero de segmentos
			bestFitScore = segmentCount;
			// El mejor indice es el del threshold actual
			bestFitIndex = i;
			// El mejor threshold
			bestThreshold = pipeline_data->thresholds[i];
			// Los mejores contornos
			bestContours = allTextContours[i];
		}
	}

	// Si debug del analisis de caracteres
	if (this->config->debugCharAnalysis)
		// Imprime el indice y la mejor puntuacion
		cout << "Best fit score: " << bestFitScore << " Index: " << bestFitIndex << endl;

	// Si la mejor puntuacion es menor o igual que 1
	if (bestFitScore <= 1)
	{
		// Matricula descalificada
		pipeline_data->disqualified = true;
		// Razon: puntuacion baja en el analisis de caracteres
		pipeline_data->disqualify_reason = "Low best fit score in characteranalysis";
		// Termina
		return;
	}

	// Si debug del analisis de caracteres
	if (this->config->debugCharAnalysis)
	{
		// Imagen de contornos del mejor threshold
		Mat img_contours = bestContours.drawDebugImage(bestThreshold);
		// Muestra la imagen
		displayImage(config, "Matching Contours", img_contours);
	}

	// Si se auto invierte la imagen
	if (config->auto_invert)
		// Comprueba si esta invertida
		pipeline_data->plate_inverted = isPlateInverted();
	else
		// Esta invertida si se invierte siempre
		// Si es nunca, es falso, si es siempre, es verdad
		pipeline_data->plate_inverted = config->always_invert;

	// Si debug general
	if (config->debugGeneral)
		// Imprime si la imagen esta invertida
		cout << "Plate inverted: " << pipeline_data->plate_inverted << endl;

	// Si matriculas multilinea y auto invertir y esta invertida
	if (config->multiline && config->auto_invert && pipeline_data->plate_inverted)
	{
		// Invierte la matricula multilinea
		bitwise_not(pipeline_data->crop_gray, pipeline_data->crop_gray);
		// Rehace los thresholds antes de encontrar la segunda linea
		pipeline_data->thresholds = produceThresholds(pipeline_data->crop_gray, pipeline_data->config);
	}

	// Busca la linea
	LineFinder lf(pipeline_data);
	// Encuentra las lineas
	vector<vector<Point> > linePolygons = lf.findLines(pipeline_data->crop_gray, bestContours);

	// Lineas de texto
	vector<TextLine> tempTextLines;
	// Para cada linea
	for (unsigned int i = 0; i < linePolygons.size(); i++)
	{
		// Linea poligonal
		vector<Point> linePolygon = linePolygons[i];

		// Linea superior
		LineSegment topLine = LineSegment(linePolygon[0].x, linePolygon[0].y, linePolygon[1].x, linePolygon[1].y);
		// Linea inferior
		LineSegment bottomLine = LineSegment(linePolygon[3].x, linePolygon[3].y, linePolygon[2].x, linePolygon[2].y);

		// Area del texto
		vector<Point> textArea = getCharArea(topLine, bottomLine);

		// Linea de texto
		TextLine textLine(textArea, linePolygon, pipeline_data->crop_gray.size());

		// Almacena la linea de texto
		tempTextLines.push_back(textLine);
	}

	// Filtra entre lineas con el mejor threshold, los mejores contornos y las lineas encontradas
	filterBetweenLines(bestThreshold, bestContours, tempTextLines);

	// Ordena las lineas de arriba a abajo
	std::sort(tempTextLines.begin(), tempTextLines.end(), sort_text_line);

	// Para cada linea de texto
	for (unsigned int i = 0; i < tempTextLines.size(); i++)
	{
		// Rehace el area del texto una vez eliminados los contornos entre lineas
		vector<Point> updatedTextArea = getCharArea(tempTextLines[i].topLine, tempTextLines[i].bottomLine);
		// Linea poligonal
		vector<Point> linePolygon = tempTextLines[i].linePolygon;
		// Si el area de texto actualizada es mayor que cero y la linea poligonal tambien
		if (updatedTextArea.size() > 0 && linePolygon.size() > 0)
		{
			// Guarda la nueva linea de texto
			pipeline_data->textLines.push_back(TextLine(updatedTextArea, linePolygon, pipeline_data->crop_gray.size()));
		}

	}

	// Si se han encontrado lineas de texto
	if (pipeline_data->textLines.size() > 0)
	{
		// Drenaje de confianza
		int confidenceDrainers = 0;
		// Numero de segmentos
		int charSegmentCount = this->bestContours.getGoodIndicesCount();
		// Si se ha encontrado uno
		// Elimina bordes
		if (charSegmentCount == 1)
			// Aumenta el drenaje de confianza
			confidenceDrainers += 91;
		// Si hay menos de 5 segmentos en la linea
		// Elimina contornos peque√±os
		else if (charSegmentCount < 5)
			// El drenaje de confianza es mayor cuanto menos segmentos sean
			confidenceDrainers += (5 - charSegmentCount) * 10;

		// Utiliza el angulo de la primera linea (en multilinea son paralelas)
		int absangle = abs(pipeline_data->textLines[0].topLine.angle);
		// Si es mayor que el maximo
		if (absangle > config->maxPlateAngleDegrees)
			// Aumenta el drenaje de confianza
			confidenceDrainers += 91;
		// Si no, pero es mayor que 1
		else if (absangle > 1)
			// El drenaje aumenta cuanto mas grande es la inclinacion
			confidenceDrainers += absangle ;

		// Si es multilinea pero solo se ha encontrado una
		if (pipeline_data->isMultiline && pipeline_data->textLines.size() < 2)
		{
			// Si modo debug
			if (config->debugCharAnalysis)
				// Imprime que no se ha encontrado el resto de lineas
				std::cout << "Did not detect multiple lines on multi-line plate" << std::endl;
			// Aumenta el drenaje de confianza
			confidenceDrainers += 95;
		}

		// Si el drenaje de confianza es muy alto
		if (confidenceDrainers >= 90)
		{
			// Descalificada
			pipeline_data->disqualified = true;
			pipeline_data->disqualify_reason = "Low confidence in characteranalysis";
		}
		else
		{
			// Resta el drenaje de confianza al maximo de confianza
			float confidence = 100 - confidenceDrainers;
			// La puntuacion del analisis es la confianza
			pipeline_data->confidence_weights.setScore("CHARACTER_ANALYSIS_SCORE", confidence, 1.0);
		}
	}
	// Si no se han encontrado lineas
	else
	{
		// Descalificada
		pipeline_data->disqualified = true;
		pipeline_data->disqualify_reason = "No text lines found in characteranalysis";
	}

	// Si modo debug del tiempo
	if (config->debugTiming)
	{
		// Fin temporizador
		timespec endTime;
		getTimeMonotonic(&endTime);
		// Imprime tiempo de analisis
		cout << "Character Analysis Time: " << diffclock(startTime, endTime) << "ms." << endl;
	}

	// Si debug analisis caracteres y se han encontrado lineas
	if (this->pipeline_data->config->debugCharAnalysis && pipeline_data->textLines.size() > 0)
	{
		// Tablero de imagenes del threshold
		vector<Mat> tempDash;
		// Para cada threshold
		for (unsigned int z = 0; z < pipeline_data->thresholds.size(); z++)
		{
			// Imagen del threshold
			Mat tmp(pipeline_data->thresholds[z].size(), pipeline_data->thresholds[z].type());
			pipeline_data->thresholds[z].copyTo(tmp);
			cvtColor(tmp, tmp, CV_GRAY2BGR);

			// Guarda la imagen del threshold
			tempDash.push_back(tmp);
		}

		// Mejor imagen del threshold
		Mat bestVal(this->bestThreshold.size(), this->bestThreshold.type());
		this->bestThreshold.copyTo(bestVal);
		cvtColor(bestVal, bestVal, CV_GRAY2BGR);

		// Para cada contorno dentro de los mejores
		for (unsigned int z = 0; z < this->bestContours.size(); z++)
		{
			// Color 255,0,0
			Scalar dcolor(255,0,0);
			// Si es bueno
			if (this->bestContours.goodIndices[z])
				// Color 0,255,0
				dcolor = Scalar(0,255,0);
			// Dibuja los contornos con los distintos colores
			drawContours(bestVal, this->bestContours.contours, z, dcolor, 1);
		}
		// Guarda el mejor threshold
		tempDash.push_back(bestVal);
		// Muestra la imagen
		displayImage(config, "Character Region Step 1 Thresholds", drawImageDashboard(tempDash, bestVal.type(), 3));
	}
}
